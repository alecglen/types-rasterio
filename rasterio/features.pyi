from rasterio import warp as warp
from rasterio.dtypes import can_cast_dtype as can_cast_dtype, get_minimum_dtype as get_minimum_dtype, validate_dtype as validate_dtype
from rasterio.enums import MergeAlg as MergeAlg
from rasterio.env import ensure_env as ensure_env
from rasterio.errors import ShapeSkipWarning as ShapeSkipWarning
from rasterio.rio.helpers import coords as coords
from rasterio.transform import Affine as Affine, IDENTITY as IDENTITY, guard_transform as guard_transform, rowcol as rowcol
from rasterio.windows import Window as Window
from typing import Any

log: Any

def geometry_mask(geometries, out_shape, transform, all_touched: bool = ..., invert: bool = ...): ...
def shapes(source, mask: Any | None = ..., connectivity: int = ..., transform=...) -> None: ...
def sieve(source, size, out: Any | None = ..., mask: Any | None = ..., connectivity: int = ...): ...
def rasterize(shapes, out_shape: Any | None = ..., fill: int = ..., out: Any | None = ..., transform=..., all_touched: bool = ..., merge_alg=..., default_value: int = ..., dtype: Any | None = ...): ...
def bounds(geometry, north_up: bool = ..., transform: Any | None = ...): ...
def geometry_window(dataset, shapes, pad_x: int = ..., pad_y: int = ..., north_up: Any | None = ..., rotated: Any | None = ..., pixel_precision: Any | None = ..., boundless: bool = ...): ...
def is_valid_geom(geom): ...
def dataset_features(src, bidx: Any | None = ..., sampling: int = ..., band: bool = ..., as_mask: bool = ..., with_nodata: bool = ..., geographic: bool = ..., precision: int = ...) -> None: ...
